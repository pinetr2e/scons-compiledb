import scons_compiledb

def _listify(item):
    if isinstance(item, list):
        return item
    if item is None:
        return []
    else:
        return [item]


def create_db_entry_for_clang(env, target, source, cxx, shared):
    defines = _listify(env.get('CPPDEFINES'))
    incs = _listify(env.get('CPPPATH'))
    flags = '{} {}'.format(
        ' '.join('-D{}'.format(d) for d in defines),
        ' '.join('-I{}'.format(i) for i in incs))
    source_path = source[0].path
    toolchain = 'clang++' if cxx else 'clang'
    return {'directory': 'c:',
            'file': source_path,
            'command': '{} {} -c {}'.format(toolchain, flags, source_path)}


env = DefaultEnvironment(tools=['gcc', 'g++', 'link'],
                         CPPDEFINES=['D1'], CPPPATH=['I1'])


config = scons_compiledb.Config(entry_func=create_db_entry_for_clang)
scons_compiledb.enable(env, config)

env.Program("hello", "a.c")
env.Append(CPPDEFINES=['D2'], CPPPATH=['I2'])
env.CompileDb()
